class File {
    let handle = null;
    constructor(handle) {
        this.handle = handle;
    }
    fn close() {
        if (this.handle == null) return;
        this.handle.close();
        this.handle = null;
    }
    fn read(n) {
        if (this.handle == null) raise new Exception("File is closed");
        let bytes = this.handle.read(n);
        bytes.to_string()
    }
    fn read_to_end() {
        if (this.handle == null) raise new Exception("File is closed");
        let str = "";
        while (true) {
            let buffer = Buffer.with_size(8192);
            let read = this.handle.read(buffer, buffer.length(), 0);
            if (read == 0) break;
            str = str.concat(buffer.to_string());
        }
        str
    }
    fn write_string(string) {
        if (this.handle == null) raise new Exception("File is closed");
        let buffer = Buffer.from_string(string);
        let offset = 0;
        let len = buffer.length();
        while (offset < len) {
            let written = this.handle.write(buffer, len - offset, offset);
            offset += written;
        }
    }
}

class Path {
    let path = "";
    constructor(path) {
        this.path = path;
    }
    fn to_string() this.path;
    fn open() new File(FileSystem.open(this.path));
    
}