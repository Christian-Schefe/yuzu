mod fs;

class Iterator {
    fn map(map) new MapIterator(this, map);
    fn iter() this;
    fn collect() {
        let res = [];
        let cur = this.next();
        while (cur != null) {
            res.push(cur.value);
            cur = this.next();
        }
        res
    }
}

class IndexIterator : Iterator {
    let target = null;
    let current = -1;
    constructor(target) { 
        this.target = target;
    }
    fn next() {
        this.current += 1;
        if (this.current >= this.target.length()) null
        else {value: this.target[this.current]}
    }
}

class ObjectEntryIterator : Iterator {
    let target = null;
    let keys = null;
    let current = -1;
    constructor(target) { 
        this.target = target;
        this.keys = Object.keys(target);
    }
    fn next() {
        this.current += 1;
        if (this.current >= this.keys.length()) null
        else {
            let key = this.keys[this.current];
            {value: [key, this.target[key]]}
        }
    }
}

class MapIterator : Iterator {
    let iterator = null;
    let map_fn = null;
    constructor(iterator, map_fn) {
        this.iterator = iterator;
        this.map_fn = map_fn;
    }
    fn next() {
        let next = this.iterator.next();
        if (next == null) return null;
        next.value = (this.map_fn)(next.value);
        next
    }
}

class BufferSlice {
    let buffer = null;
    let start = 0;
    let end = 0;
    constructor(buffer, start, end) {
        this.buffer = buffer;
        this.start = start;
        this.end = end;
    }
    fn length() this.end - this.start;
    fn to_string() {
        let str = "";
        for (let i = this.start; i < this.end; i += 1) {
            str = str.concat(String.from_char_code(this.buffer[i]));
        }
        str
    }
}

class Array {
    fn iter() new IndexIterator(this);
}

class String {
    fn iter() new IndexIterator(this);
    fn is_empty() this.length() == 0;
}

class Object {
    fn iter() Object.keys(this).iter();
    fn entries() new ObjectEntryIterator(this);
}

class Exception {
    let message = "";
    constructor(message) {
        this.message = message;
    }
}

class TypedSlice {
    fn iter() new IndexIterator(this);
}
