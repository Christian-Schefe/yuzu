class Iterator {
    fn map(map) new MapIterator(this, map);
    fn collect() {
        let res = [];
        let cur = this.next();
        while (cur != null) {
            res.push(cur.value);
            cur = this.next();
        }
        res
    }
}

class IndexIterator : Iterator {
    let target = null;
    let current = -1;
    constructor(target) { 
        this.target = target;
    }
    fn next() {
        this.current += 1;
        if (this.current >= this.target.length()) null
        else {value: this.target[this.current]}
    }
}

class MapIterator : Iterator {
    let iterator = null;
    let map_fn = null;
    constructor(iterator, map_fn) {
        this.iterator = iterator;
        this.map_fn = map_fn;
    }
    fn next() {
        let next = this.iterator.next();
        if (next == null) return null;
        next.value = (this.map_fn)(next.value);
        next
    }
}

class BufferSlice {
    let buffer = null;
    let start = 0;
    let end = 0;
    constructor(buffer, start, end) {
        this.buffer = buffer;
        this.start = start;
        this.end = end;
    }
    fn length() this.end - this.start;
    fn to_string() {
        let str = "";
        for (let i = this.start; i < this.end; i += 1) {
            str = str.concat(String.from_char_code(this.buffer[i]));
        }
        str
    }
}

class Array {
    fn iter() new IndexIterator(this);
}

class String {
    fn iter() new IndexIterator(this);
}

class Exception {
    let message = "";
    constructor(message) {
        this.message = message;
    }
}

class File {
    let file = null;
    constructor(path) {
        print(File);
        this.file = File.open(path);
    }
    fn close() {
        if (this.file == null) return;
        this.file.close();
        this.file = null;
    }
    fn read(n) {
        if (this.file == null) raise new Exception("File is closed");
        let bytes = this.file.read(n);
        bytes.to_string()
    }
    fn read_to_end() {
        if (this.file == null) raise new Exception("File is closed");
        let str = "";
        while (true) {
            let buffer = Buffer.with_size(8192);
            let read = this.file.read(buffer, buffer.length(), 0);
            if (read == 0) break;
            str = str.concat(buffer.to_string());
        }
        str
    }
    fn write_string(string) {
        if (this.file == null) raise new Exception("File is closed");
        let buffer = Buffer.from_string(string);
        let offset = 0;
        let len = buffer.length();
        while (offset < len) {
            let written = this.file.write(buffer, len - offset, offset);
            offset += written;
        }
    }
}

class TypedSlice {
    fn iter() new IndexIterator(this);
}
