mod module;
mod module2;

use root::module::test_fn;
use std::fs::Path;

fn main() {
    print("Hello, world!");
    print(test_fn());
    print(root::module2::test_fn2());

    let i = new root::module::TestClass2();
    print(i.method());
    let j = new root::module2::TestClass4();
    print(j.method());
    let k = new root::module2::TestClass3();
    print(k.method());

    for (i in [1,2,3]) {
        print(i);
    }

    let file = new Path("data/test.txt").open();
    file.write_string("Hello, file!\n");
    print(file.read_to_end());
    file.close();

    let path = new Path("data/test.txt");
    print(path.to_string());

    for (c in "hello world") {
        print(c);
    }
    for (c in "hello world".slice(1, 5)) {
        print(c);
    }
    let s = "hello world";
    for (let i = 0; i < s.length(); i += 1) {
        print(s[i], Random.int(0, 100));
    }
    for (let i = 0; i < 100; i += 1) {
        print(factorial(i));
    }
    try {
        raise new MyOtherException("An error occurred");
    } catch (MyException as e) {
        print(e.message);
    }
}

fn factorial(n) {
    let result = 1;
    for (let i = 1; i <= n; i += 1) {
        result *= i;
    }
    result
}

class MyException : Exception {
    constructor(msg) {
        this.message = msg;
        print("MyException created");
    }
}

class MyOtherException : Exception {
    constructor(msg) {
        this.message = msg;
        print("MyOtherException created");
    }
}

main();
