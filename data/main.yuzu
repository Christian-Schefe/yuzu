mod module;
mod module2;

use root::module::test_fn;
use std::fs::Path;
use root::module::my_static;

fn main() {
    print("Hello, world!", System.args());
    print(test_fn());
    print(root::module2::test_fn2());

    let i = new root::module::TestClass2();
    print(i.method());
    let j = new root::module2::TestClass4();
    print(j.method());
    let k = new root::module2::TestClass3();
    print(k.method());

    for (i in [1,2,3]) {
        print(i);
    }
    print(a);
    a.val = 365;
    print(a);

    print(root::module::my_static);
    root::module::my_static.val = 365;
    print(root::module::my_static);
/*
    print(factorial(54));
    factorial = 56;
    print(factorial(54));
*/
    print("static function", root::module::static_fn(21));

    for (key in {a: 30, b: 40}) {
        print(key);
    }
}

fn factorial(n) {
    let result = 1;
    for (let i = 1; i <= n; i += 1) {
        result *= i;
    }
    result
}

static a = {val: 10};

class Static {
    static let value = null;
}

class MyException : Exception {
    constructor(msg) {
        this.message = msg;
        print("MyException created");
    }
}

class MyOtherException : Exception {
    constructor(msg) {
        this.message = msg;
        print("MyOtherException created");
    }
}

main();
