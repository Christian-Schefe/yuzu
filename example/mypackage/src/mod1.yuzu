export fn test_fn(a, b) {
    print("In test_fn", a, b);
    let inst = new TestClass2(5);
    inst.method(40);
    let m = inst.method;
    m(41);
    let m2 = TestClass2.method;
    m2(inst, 42);

    a + b
}

export fn fib(n) {
    if (n <= 1) {
        n
    } else {
        fib(n - 1) + fib(n - 2)
    }
}

export class TestClass {
    constructor() {
        let x = 10;
        let y = 20;
        let arr = [1, 2, 3];
        let what = let xz = 6;
        {x: x, y: y, arr: arr, what: what}
    }
    fn test_method(a, b) {
        print(this.x, this.y, this, a, b);
        this.x += a;
        this.y = b;
        let arr = this.arr;
        arr[0] = 99;
        arr[0];
        arr[1] += 1;
        arr[1] += this.arr[0];
        print(arr, this.arr);
        print(this.what);
    }
}

export class TestClass2 {
    constructor(a) {value: a};
    fn method(a) {
        print("In TestClass2 method", a);
    }
    static fn static_method(a) {
        print("In TestClass2 static_method", a);
    }
    fn $add(other) {
        print("In TestClass2 operator +", this, other);
        new TestClass2(this.value + other.value)
    }
    fn $negate() {
        print("In TestClass2 operator -", this);
        new TestClass2(-this.value)
    }
}

print("Module mod1 loaded");