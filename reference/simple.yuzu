let arr = [1, 32, 45, 25];

print(arr.iter());
for (i in arr) {
    print(i);
}

let iter = arr.iter().map((i) => i * 2);
print(iter.collect());

class BaseClass {
    let x = 5;
    constructor(a) {
        this.x = a;
    }
    fn test() {
        print("test", this);
    }
    static fn static_test() {
        print("static test");
    }
}

class SubClass : BaseClass {
    let x = 7;
    constructor() {
        print(this.prototype(), "hi");
        print(this);

        print(Prototype.super(SubClass));

        BaseClass["$constructor"](this, 10);
        BaseClass.static_test();
        BaseClass.test(this);
        print(this);
        this.test();

        print((Prototype.super(this.prototype())["$constructor"])(this, 35));

        print("??", 25 ?? 30, 0 ?? 3, null ?? 5, null ?? 3 ?? 7);

        let p = Object.prototype(this);
        print(p);
    }
}


print((new BaseClass(33)).x);
print((new SubClass()).x);
print(SubClass.static_test());

class MyException : Exception {
    let aadg = "hi";
    constructor(message) {
        this.message = message;
    }
}

try {
    let ex = new MyException("an exception");
    print(ex.prototype(), "\n", Prototype.super(ex.prototype()), Prototype.super(Exception));
    raise ex;
} catch Exception as e {
    print("caught", e);
    print(e.aadg);
};

print(File);
let f = new File("reference/simple.yuzu");
//let f = File.open("reference/simple.yuzu");
print(f.read_to_end());
f.close();